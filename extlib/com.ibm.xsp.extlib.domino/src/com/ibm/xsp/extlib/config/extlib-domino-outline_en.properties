# *****************************************************************
# /*
# * Copyright IBM Corp. 2010, 2013
# * 
# * Licensed under the Apache License, Version 2.0 (the "License"); 
# * you may not use this file except in compliance with the License. 
# * You may obtain a copy of the License at:
# * 
# * http://www.apache.org/licenses/LICENSE-2.0
# * 
# * Unless required by applicable law or agreed to in writing, software 
# * distributed under the License is distributed on an "AS IS" BASIS, 
# * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or 
# * implied. See the License for the specific language governing 
# * permissions and limitations under the License.
# */
# *****************************************************************
# DO NOT EDIT. THIS FILE IS GENERATED.
# NLS_ENCODING=UNICODE 
# NLS_MARKUP=IBMNJDK2 
# NLS_MESSAGEFORMAT_NONE
## G11N SA UI -- Special IT Audience resources follow
complex-type.loginTreeNode.name= Login or Logout Node
complex-type.loginTreeNode.descr= Node that displays the login or logout link
property.rendered.name= Rendered
property.rendered.descr= Indicates whether the link should be visible in the HTML page. This generally defaults to true, meaning that the link is present. There are exceptions to this behavior, for example, the link is never shown when running in the Notes client. Also the logout link will only be displayed if the authentication protocol has support for a logout behavior.
complex-type.dominoViewListTreeNode.name= View or Folder List
complex-type.dominoViewListTreeNode.descr= Node that displays the list of views or folders contained in a database
property.filter.name= Selection Regular Expression
property.filter.descr= Regular expression used to filter the view or folder names to be displayed
property.var.complex-type.dominoViewListTreeNode.name= Var
# "view1", "view1.getName()", "submitValue" should not be translated
property.var.complex-type.dominoViewListTreeNode.descr= Request scope variable name under which the view object will be made available. For example, if your variable is called "view1" then by using "view1.getName()" syntax you could retrieve a view name and use it for "submitValue".
property.views.name= Include Views
property.views.descr= Flag that defines if the view objects should be processed. Default is true.
property.folders.name= Include Folders
property.folders.descr= Flag that defines if the folder objects should be processed.Default is true.
complex-type.dominoViewEntriesTreeNode.name= View or Folder Entries
complex-type.dominoViewEntriesTreeNode.descr= Tree node that displays the content of a view or folder entries
property.var.complex-type.dominoViewEntriesTreeNode.name= Var
property.var.complex-type.dominoViewEntriesTreeNode.descr= Request scope variable name under which the view entry object will be made available
property.labelColumn.name= Label Column
property.labelColumn.descr= Name of the view column to display as the node label
property.keys.name= Filter Keys
# getAllDocumentsByKey is a technical term and should not be translated
property.keys.descr= A key is used to filter the contents of a view based on the column values. You create a key (or vector of keys if called from JavaScript), where a key corresponds to a value in a sorted column. Results are consistent with getAllDocumentsByKey method in Domino Java API classes.
property.keysExactMatch.name= Filter Using Exact Match
property.keysExactMatch.descr= Determines whether or not exact matching will be used when the filter key is applied to the view. Default is partial match, which returns all entries that match the initial characters of the key.
